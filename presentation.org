#+title: Resource-Efficient Quantum Computing by Breaking Abstractions
#+author: Yunong Shi, Pranav Gokhale, Prakash Murali, Jonathan M. Baker, Casey Duckering, Yongshan Ding, Natalie C. Brown, Christopher Chamberland,, Ali Javadi Abhari, Andrew W. Cross, David I. Schuster, Kenneth R. Brown, Margaret Martonosi, and Frederic T. Chong
#+date: April 2023
#+options: toc:1 num:nil

#+options: reveal_history:t reveal_fragmentinurl:t
#+options: reveal_mousewheel:t reveal_inter_presentation_links:t
#+options: reveal_width:1400 reveal_height:1400
#+options: timestamp:nil

#+reveal_trans: none
#+reveal_theme: white
#+reveal_title_slide: <h1 class="title">%t</h1><h3 class="subtitle">%s</h3><h2 class="author">%a</h2><h2 class="date">%d</h2>
#+reveal_extra_css: ./local.css

#+cite_export: csl

#+begin_comment
Hello I am Tassos

My presentation will first go through the paper in order. Along the way I'll
make a few asides for discussion aand making connections to other papers.

Then I'll spend the rest of my time giving prompts for discussion, in the
direction of criticizing WaveNet and understanding how those problems were
addressed in subsequent research.
#+end_comment

* COMMENT Introduction

1. Outline
2. Introduction
3.


I'll stick to the flow of the paper, and i'll introduce any necessary QM or QC
background as it comes up. some of it can still be confusing so please interrupt
with questions if you have them. it will help me fill time and help with the
discussion

* COMMENT We have Noisy Intermediate Scale Quantum devices
** Examples
placed inside dilution fridges of temperature near absolute
zero.

protected by a metal transmission line from environmental noise.  For SC QIP
platforms, qubit control is achieved through sending microwave pulses into the
transmission line that surrounds the Since the early days of quantum computing,
quantum LC circuits to change the qubit state and those operations are usually
done within several hundreds of nanoseconds

rapped ion qubits are ions confined in the potential of electrodes in vacuum
chambers. Trapped ion qubits have a much longer coherence (> 1 second) and
quantum operations are performed by shinning modulated laser beam.

qiskit lets you program both of them with one abstraction.

** They can can outperform classical computers in certain tasks.
** They still can't meet the rqeuirements of useful QC applications.
Due to errors. (What is that? Devote a slide.)
1. qubit decoherence
2. gate errors
3. State Preparation and Measurement errors.

"the best reported qubit decoherence time on a superconducting QIP platform is
around 500µs (meaning that in 500µs, the probability of a logical 1 state
staying unflipped drops to 1/e ≈ 0.368), the error rate of 2-qubit gates is
around 1%-5% in a device, measurement error of a single qubit is between 2%- 5%"

4. "emergent error modes" (cross talk)

Hardware solutions to these problems are uncertain

** We also have abstractions which enable programming quantum computations
Qiskit [5] by IBM, Cirq [76] by Google, PyQuil
[18] by Rigetti and strawberry fields [141] by Xanadu, follow
the quantum circuit model.

configuring, compiling and running their
quantum programs in an automated workflow and roughly
follow a layered approach

like its classical counterpart, layers of subroutines that are built upon the
abstraction provided by the next layer.

They can handle different quantum hardware architectures, but they may use
hardware suboptimally. If the computation can't finish before decoherence, its
result is worthless. "Do-or-die"

#+DOWNLOADED: screenshot @ 2023-04-02 22:27:14
[[file:We_have_Noisy_Intermediate_Scale_Quantum_devices/2023-04-02_22-27-14_screenshot.png]]

** Therefore...
we want to maximize utilization of our scarce resources
rather than simplify

there are
many supporting examples from the classical computing world
such as the emergence of application specific architectures like
the GPU and the TPU. However, this view is often overlooked
in the software/hardware design in quantum computing

* COMMENT Outline

compilation optimizations that break the ISA abstraction by exposing pulse level
information (Section II)

and exposing noise information (Section III), respectively.

improves general circuit latency by
exposing the third energy level of the underlying physical space,
i.e., breaking the qubit abstraction using qutrits (Section IV).

Gottesman-Kitaev-Preskill (GKP) qubit
encoding in a Quantum Harmonic Oscillator (QHO)
(Quantum Error Correction)
# that
# exposes error information in the form of small shifts in the
# phase space to assist the upper level error mitigation/correction
# procedure (Section V).

Future directions

* Breaking the ISA Abstraction Using Pulse-Level Compilation
** Key Idea

1. Do not limit the compiler to use the restricted set of 1- and 2-qubit quantum
   instructions in the order they're given.
2. *Aggregates instructions* into a customized set of instructions that
   correspond to *optimized* control pulses.

** Background for Logical ISA

- Analogous to the classical Instruction Set Architecture (ISA) abstraction.
- Pauli gates, H, CNOT, etc.

\begin{equation}
\text{CNOT} = \begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 0 & 1 \\
0 & 0 & 1 & 0 \\
\end{bmatrix}

\sigma_x = \begin{bmatrix}
0 & 1 \\
1 & 0 \\
\end{bmatrix}
\end{equation}

** Background for Physical ISA

# SC;
# Things like CR Gate or iSWAP
# Trapped ION
# Molmer Sorensen Gate
# Controlled Phase Gate
# The control signals directly affect the Hamiltonian (an operator for the total energy of the system)
# that is, a function from one state to another

#+DOWNLOADED: screenshot @ 2023-04-04 23:50:25
[[file:Section_2/2023-04-04_23-50-25_screenshot.png]]

** Example Mismatches

1. CNOT + X usually compiled into a pulse schedule where each operation is
   executed serially. With SC QIP these pulses are commutative
   and can be done simultaneously.
2. SWAPs are often implemented with three CNOTS. This is suboptimal on Quantum
   Dot systems where SWAPS are supported directly.

** One more piece: Quantum Optimal Control

- Generating high fidelity control pulses from the physical schedule.
- Gradient Ascent Pulse Engineering (GRAPE) [cite:@khanejaOptimalControlCoupled2005].
- Think *Back-propagation* with the following loss function through to the pulse parameters:

  $F = \frac{1}{d^2}|\text{tr}(X'^\dagger X)|^2 = 0.9801$

Iteratively refine signal parameters by gradient ascent with respect to the gate fidelity.

#+begin_comment
$X = \begin{pmatrix} 0 & 1 \\ 1 & 0 \end{pmatrix}$
$X' = \begin{pmatrix} 0.141 & 0.99 \\ 0.99 & -0.141 \end{pmatrix}$
Back propagating from final fidelity measurement through to the pulse parameters.
#+end_comment

** Grape Algorithm

$u_{k}(j)\rightarrow u_{k}(j)+\epsilon\frac{\delta\phi_{0}}{\delta u_{k}(j)} \qquad\qquad\qquad\qquad(13)$

#+DOWNLOADED: screenshot @ 2023-04-05 00:32:54
#+attr_html: :height 800px
[[file:Section_2/2023-04-05_00-32-54_screenshot.png]]


** Methodology

# the workflow of our compilation methodology with a circuit instance of the
# Quantum Approximate Optimization Algorithm (QAOA) for solving the MAXCUT
# problem on the triangle graph

#+DOWNLOADED: screenshot @ 2023-04-05 00:35:45
[[file:Section_2/2023-04-05_00-35-45_screenshot.png]]

# Input Circuit

# Details:

# Executed on a superconducting architecture with limited connectivity. A SWAP is
# inserted to satisfy.

# "Optimized Pulse-Level Compilation Using Gate Aggregation"

# First, at the Program Level: module flattening and loop unrolling -> QASM

1. Commutativity Detection
   Identify Operations With Diagonal Matrix Representations
2. Instruction Aggregation
   Commutative operations are aggregated in a new logical schedule.
3. Scheduling + Mapping
   1. Rearrange those commutative operations.
   2. Make transformations so that the circuit respect the topological
      constraints of hardware connectivity
4. Generate Pulses (Using GRAPE)

*** Commutativity Detection
#+DOWNLOADED: screenshot @ 2023-04-04 00:27:34
[[file:Section_2/2023-04-04_00-27-34_screenshot.png]]

*** Gate Dependency Graph (GDG)
False dependencies are removed and the GDG is re-structureed.

#+DOWNLOADED: screenshot @ 2023-04-05 01:30:15
[[file:Section_2/2023-04-05_01-30-15_screenshot.png]]

*** Scheduling and Mapping
**** Commutativity-aware logical scheduling
1. The CLS iteratively schedules the available intructions on each qubits.
2. At each iteration, the CLS draws instruction candidates that can be executed
   in the current time step for scheduling.

**** Qubit Mapping
1. Start with a "Qubit Interaction Graph"
2. Partition with Minimum Cuts [cite:@karypisFastHighQuality1998] to generate initial mapping.
3. SWAPS are inserted as needed in the remaining graph.

*** Instruction Aggregation and Physical Execution

Aggregate the instructions in the GDG. Final pulses are generated and optimized
with GRAPE.

#+DOWNLOADED: screenshot @ 2023-04-05 00:57:43
[[file:Section_2/2023-04-05_00-57-43_screenshot.png]]

** Takeaway
1. Reduced total execution time of the circuit by about 2.97×
2. Achieves a geometric mean of 5.07× pulse time reduction comparing to the
   standard gate-based compilation.

* Breaking the ISA Abstraction Using Noise-Adaptive Compilation
** Noise: Another Piece of Information to Expose
# Already exposed: connectivity and a set of legal instructions (required)
1. Represented by properties of the Physical ISA, Qubit Quality, Gate Fidelity
2. Exist due to manufacturing imperfections, imprecise qubit control, external
   interference.
3. Periodically measured during systems calibration

#+DOWNLOADED: screenshot @ 2023-04-04 01:34:08
[[file:Section_3/2023-04-04_01-34-08_screenshot.png]]

# From daily calibration logs we find that, the average qubit
# coherence time is 40 microseconds, two-qubit gate error rate is
# 7%, readout error rate is 4% and single qubit error rate is 0.2%.
# The two-qubit and readout errors are the dominant noise sources
# and vary up to 9X across gates and calibration cycles.

# Can also happen on trapped ion systems

** Key idea:
- Compiler optimizations should be informed by this noise information from the
  latest hardware characterization data to obtain the best executions.

- Opportunities are in the following QC compilation steps:
  - Qubit Mapping
  - Gate Scheduling
  - Swap Insertions

*** Therefore, the goals are:

1. Maps logical qubits onto hardware locations with high reliability. Prioritize
   the two-qubit and readout error rates.
2. Schedule all gates to finish before decoherence.
3. Minimizing the number of SWAPs and performing SWAPs along reliable hardware
   paths.

** Methodology
- Satisfiability Modulo Theory (SMT) solver (z3).
- Attempt to maximize success rate, approximated by a product of the reliability
  of all gates in the program.
- Termed R-SMT*

#+begin_comment
The variables and constraints in the optimization encode program informa- tion,
device topology constraints and noise information. The variables express the
choices for program qubit mappings,
#+end_comment

#+DOWNLOADED: screenshot @ 2023-04-04 01:52:45
[[file:Section_3/2023-04-04_01-52-45_screenshot.png]]

# success rate can only be determined from a real-system run, we model it at
# compile time as the program reliablity.

# define the reliability of a program as the product of the reliability of all
# gates in the program.  this is not a perfect model for the success rate, it
# serves as a useful measure of overall correctness

# In practice, we use the Z3 SMT solver

# We term this algorithm as R-SMT*.

** Evaluation

- Real-system evaluation on IBMQ16 using 12 common QC benchmarks
- R-SMT*, T-SMT* and IBM’s Qiskit compiler (version 0.5.7)
- R-SMT* considers gate durations, coherence times, and error rates, T-SMT* does
  not use error rates.

#+DOWNLOADED: screenshot @ 2023-04-04 21:05:36
[[file:Section_3/2023-04-04_21-05-36_screenshot.png]]

($\omega$ is a weight factor for readout error terms $\text{Gate Error} + \omega \text{Readout Error}$)

# "Fig. 9: For real data/experiment, on IBMQ16, qubit mappings for Qiskit and our compiler with three optimization objectives,
# varying the type of noise-awareness. The edge labels indicate the CNOT gate error rate (×10−2 ), and the node labels indicate
# the qubit’s readout error rate (×10−2 ). The thin red arrows indicate CNOT gates. The thick yellow arrows indicate SWAP
# operations. ω is a weight factor for readout error terms in the R-SMTF objective. (a) Qiskit finds a mapping which requires
# SWAP operations and uses hardware qubits with high readout errors (b), T-SMTF finds a a mapping which requires no SWAP
# operations, but it uses an unreliable hardware CNOT between p3 and p0 . (c) Program qubits are placed on the best readout
# qubits, but p0 and p3 communicate using swaps. (d) R-SMTF finds a mapping which has the best reliability where the best
# CNOTs and readout qubits are used. It also requires no SWAP operations."

# T-SMTF optimizes the execution time of the program considering real-system gate
# durations and coherence times, but not operational error rates.

# Qiskit places qubits in a lexicographic order without considering CNOT and
# readout errors and incurs extra swap operations. Similarly, T-SMTF is also
# unaware of noise variations across the device, resulting in mappings which use
# unreliable hardware

** Takeaway
R-SMT* yields geometric mean improvement in error of 2.9x over Qiskit, with up
to 18x gain.

Future Work: Explore optimization considering crosstalk characterization data
from the hardware [89].

* Breaking the Qubit Abstraction via the Third Energy Level
# Quantum computation is typically expressed with two-level binary abstraction of
# qubits. They don't have to be.

#+DOWNLOADED: screenshot @ 2023-04-05 03:15:18
[[file:Section_4/2023-04-05_03-15-18_screenshot.png]]

#+DOWNLOADED: screenshot @ 2023-04-04 02:05:05
[[file:Section_4/2023-04-04_02-05-05_screenshot.png]]

** Key idea
# In prior work on qutrits (or more generally, d-level qudits),
# researchers identified only constant factor gains from extending
# beyond qubits. In general, this prior work [103] has emphasized
# the information compression advantages of qutrits. For example,
# $N$ qubits can be expressed as $N / \log_2(3)$ qutrits, which leads to
# $log_2(3) = 1.6$ -constant factor improvements in runtimes.

- "A novel qutrit approach that leads to exponentially faster runtimes
  (i.e. shorter in circuit depth) than qubit-only approaches."
- Use the third state of a qutrit as "temporary storage". Eliminate the need for
  ancilla qubits.

** Example

# To introduce the usefulness, of this idea, they ask us to consider a quantum AND
# gate Every transformation of a quantum system is done with a *unitary operator*,
# which must be reversible. Therefore, no information can be destroyed  AND gate is not reversible, so we pass along some
# additional information.

- Consider a quantum AND gate.
- Must be reversible (Every transformation of a quantum system is done with a
  *unitary operator*, which must be reversible) $\Rightarrow$ requires an ancilla qubit.

\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & \ddots & \vdots & \vdots \\
0 & \dots  & 0 & 1 \\
0 & \dots  & 1 & 0 \\
\end{bmatrix}

- Requires at least six CNOT gates if decomposed into 1 / 2 input operations.

#+DOWNLOADED: screenshot @ 2023-04-05 04:41:23
[[file:Section_4/2023-04-05_04-41-23_screenshot.png]]

** Qutrits

- $|\psi\rangle = \alpha |0\rangle + \beta|1\rangle + \gamma|2\rangle$
- $\Vert \alpha \Vert^{2} + \Vert \beta \Vert^{2} + \Vert \gamma \Vert^{2}=1$
- Qubit Gates: $g_1 \in U(3)$
- Qubit Gates $g_2 \in U(3) \otimes U(3) = U(3^2)$

(They mention some magic gates X_{+1} and X_{-1} but I can not derive them. They
don't cite anything for this either.)

** A Qutrit Toffoli

#+DOWNLOADED: screenshot @ 2023-04-05 04:41:23
[[file:Section_4/2023-04-05_04-41-23_screenshot.png]]

#+DOWNLOADED: screenshot @ 2023-04-05 04:44:59
[[file:Section_4/2023-04-05_04-44-59_screenshot.png]]

1. Elevate $q_1$ if $q_0$ is in the $|1\rangle$ state. If $q_1$ was already in the $|1\rangle$ state, its now at $|2\rangle$.
2. If $|2\rangle$, apply X to q2.
3. Restore $q_1$ if $q_0$

A much more efficient implementation.

** In the general case,

#+DOWNLOADED: screenshot @ 2023-04-05 05:08:40
[[file:Section_4/2023-04-05_05-08-40_screenshot.png]]

"After each subsequent level of the tree structure, the number of qubits under
consideration is reduced by a factor of 2. Thus, the circuit depth is
logarithmic in N, which is exponentially smaller than ancilla-free qubit-only
circuits.  Moreover, each qutrit is operated on by a constant number of gates,
so the total number of gates is linear in N."

** Simulation

Simulated N-controlled Generalized Toffoli circuits for large N.

#+DOWNLOADED: screenshot @ 2023-04-05 05:16:05
#+attr_html: :height 200px
[[file:Section_4/2023-04-05_05-16-05_screenshot.png]]

#+DOWNLOADED: screenshot @ 2023-04-05 05:19:00
[[file:Section_4/2023-04-05_05-19-00_screenshot.png]]

Qutrit circuit has advantages ranging from 2x to 10,000x.

* Breaking the Qubit Abstraction via the GKP Encoding
** Gottesman-Kitaev-Preskill Encoding

- "Quantum error-correcting codes that protect a state of a finite-dimensional
quantum system that is encoded in an infinite-dimensional system." [cite:@gottesmanEncodingQubitOscillator2001]
- What's the infinite-dimensional system?
- "Codes that embed an n-state quantum system in a larger d-state system"
- "Our continuous-variable codes are obtained in §IV by considering a $d
  \rightarrow \infty$ limit."

#+DOWNLOADED: screenshot @ 2023-04-05 09:03:56
[[file:Section_5/2023-04-05_09-03-56_screenshot.png]]

** Usage
- "Protecting against sufficiently weak diffusive phenomena that cause the
  position and momentum of an oscillator to drift"

#+DOWNLOADED: screenshot @ 2023-04-05 08:44:47
#+attr_html: :height 400px
[[file:Section_5/2023-04-05_08-44-47_screenshot.png]]

** An Obstacle: Uncertainty

- The uncertainty principle sets a fundamental limit for extracting information
  about a particle's momentum and position...
- Solution:

"We do not know what are the measured p and q values of the state (thus expected
values of p and q remain uncertain), but we do know that they must be integer
multiples of the spacing of the grid. Thus, we have access to the error
information in both directions and if we measure values that are not multiples
of the spacing of the grid, we know there must be errors."

Idealized basis states:

$\left| \overline{{{0}}} \right\rangle_{\mathrm{gkp}} = \sum_{k=-\infty}^{\infty}S_{p}^{k}\left|q=0\right\rangle$

$\left| \overline{{{{\bf1}}}} \right\rangle_{\mathrm{gkp}} = \sum_{k=-\infty}^{\infty}{\bf S}_{p}^{k}\left|q=\sqrt{\pi}\right\rangle$

$S_{p} = e^{-2i\sqrt{\pi}p}$

** An Obstacle: Infinite Squeezing

The position eigenstate here is $\delta(0)$. So the codeword stats are
"non-normalizable" and "infinitely squeezed" in both q and p. So the position
eigenstate is replaced with a quassian.

From the original paper:

"A codeword, formally a coherent superposition of an infi-
nite number of δ-functions, becomes a sum of Gaussians
weighted by a Gaussian envelope function of width κ−1 ;
in the special case of a two-dimensional code space"

$|\tilde{0}\rangle = N_{0} \sum_{s=-\infty}^{\infty} e^{-\frac{1}{2}\kappa^{2}(2s\alpha)^{2}} T (2s\alpha) |\psi_{0}\rangle$

$|\tilde{1}\rangle = N_{1} \sum_{s=-\infty}^{\infty} e^{-\frac{1}{2}\kappa^{2}[(2s+1)\alpha)]^{2}} T [(2s+1)\alpha] |\psi_{0}\rangle$

** Approximate States Introduce Some Error

#+DOWNLOADED: screenshot @ 2023-04-05 09:57:07
[[file:Section_5/2023-04-05_09-57-07_screenshot.png]]

#+DOWNLOADED: screenshot @ 2023-04-05 09:56:54
[[file:Section_5/2023-04-05_09-56-54_screenshot.png]]

With interval $\delta$, correct errors in shift up to size
$\frac{\sqrt{\pi}}{2} - \delta$.

** Takeaway

1. Breaks the abstraction layer between error correction and the physical
   implementation of qubits.
2. Qubit encodings like the GKP encoding will be useful for reliable quantum
   computing.

* Conclusions and Future Directions

1. Physical ISA Optimizations
2. Noise-Tailored Compilation
3. Qutrits and Error Correcting Encodings

Future Directions
1. Algorithm-level optimizations (Generalized Superfast Encoding, Majorana Loop Stabilizer Code)
2. Dissipation-Assisted Error Mitigation


* Bibliography
   :PROPERTIES:
   :CUSTOM_ID: bibliography
   :END:

#+print_bibliography:

* COMMENT Questions
** what are some things causal convolutions don't provide. is that a problem?
** how do we arrive at the temporal convolution network?
stacking multiple causal convolutions with different dilation factors, so that
we cover the whole receptive field with multiple learned embeddings
** advantages of tcn?
do not back propagate through time, unlike rnn
therefore they can be trained in parallel

therefore there are not exploding / vanishing gradient problems along the time
axis (but they can only consider features inside their receptive field).
** disadvantages of tcn?
need to determine tcn up front, and its fixed.
again can only consider features inside their receptive field
** music
we didn't mention this when we were discussing the advantages of end-to-end
models, but with things like this we can generate music
